# tests/test_queue.py

import pytest
from data_structures.queue import Queue

def test_queue_initially_empty():
    queue = Queue()
    assert queue.is_empty() == True
    assert queue.size() == 0

def test_enqueue_item():
    queue = Queue()
    queue.enqueue(10)
    assert queue.is_empty() == False
    assert queue.size() == 1
    assert queue.peek() == 10

def test_dequeue_item():
    queue = Queue()
    queue.enqueue(20)
    item = queue.dequeue()
    assert item == 20
    assert queue.is_empty() == True
    assert queue.size() == 0

def test_dequeue_empty_queue():
    queue = Queue()
    with pytest.raises(IndexError) as exc_info:
        queue.dequeue()
    assert str(exc_info.value) == "Dequeue from empty queue"

def test_peek_item():
    queue = Queue()
    queue.enqueue(30)
    top = queue.peek()
    assert top == 30
    assert queue.size() == 1  # Ensure peek doesn't remove the item

def test_peek_empty_queue():
    queue = Queue()
    with pytest.raises(IndexError) as exc_info:
        queue.peek()
    assert str(exc_info.value) == "Peek from empty queue"

9. Final Recommendations
Consistent Naming Conventions:

Use test_ prefix for all test files and functions to allow pytest to automatically discover them.
Documentation:

Comment your test cases to explain the purpose of each test, especially for complex scenarios.
Mocking and Fixtures:

Utilize pytest fixtures to manage setup and teardown processes for your tests.
Use mocking (with unittest.mock or pytest-mock) to simulate dependencies and isolate the units being tested.
Maintain Test Coverage:

Use tools like pytest-cov to measure your test coverage and identify untested parts of your code.
bash
Copy code
pip install pytest-cov
pytest --cov=data_structures tests/
Refactor Tests Regularly:

As your code evolves, ensure that your tests are updated to reflect new functionality and changes.
